// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0-devel
// 	protoc        v3.12.0
// source: appointment.proto

package appointment

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appointment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_appointment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_appointment_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UserID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *UserID) Reset() {
	*x = UserID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appointment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserID) ProtoMessage() {}

func (x *UserID) ProtoReflect() protoreflect.Message {
	mi := &file_appointment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserID.ProtoReflect.Descriptor instead.
func (*UserID) Descriptor() ([]byte, []int) {
	return file_appointment_proto_rawDescGZIP(), []int{1}
}

func (x *UserID) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type AppointmentID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appointmentid string `protobuf:"bytes,1,opt,name=appointmentid,proto3" json:"appointmentid,omitempty"`
}

func (x *AppointmentID) Reset() {
	*x = AppointmentID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appointment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentID) ProtoMessage() {}

func (x *AppointmentID) ProtoReflect() protoreflect.Message {
	mi := &file_appointment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentID.ProtoReflect.Descriptor instead.
func (*AppointmentID) Descriptor() ([]byte, []int) {
	return file_appointment_proto_rawDescGZIP(), []int{2}
}

func (x *AppointmentID) GetAppointmentid() string {
	if x != nil {
		return x.Appointmentid
	}
	return ""
}

type AppointmentCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date     string  `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Uid      string  `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Duration float64 `protobuf:"fixed64,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Cost     float64 `protobuf:"fixed64,4,opt,name=cost,proto3" json:"cost,omitempty"`
	Animalid string  `protobuf:"bytes,5,opt,name=animalid,proto3" json:"animalid,omitempty"`
	Reason   string  `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *AppointmentCreate) Reset() {
	*x = AppointmentCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appointment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentCreate) ProtoMessage() {}

func (x *AppointmentCreate) ProtoReflect() protoreflect.Message {
	mi := &file_appointment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentCreate.ProtoReflect.Descriptor instead.
func (*AppointmentCreate) Descriptor() ([]byte, []int) {
	return file_appointment_proto_rawDescGZIP(), []int{3}
}

func (x *AppointmentCreate) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *AppointmentCreate) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AppointmentCreate) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AppointmentCreate) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *AppointmentCreate) GetAnimalid() string {
	if x != nil {
		return x.Animalid
	}
	return ""
}

func (x *AppointmentCreate) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type AppointmentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appointmentid string  `protobuf:"bytes,1,opt,name=appointmentid,proto3" json:"appointmentid,omitempty"`
	Date          string  `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Uid           string  `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Duration      float64 `protobuf:"fixed64,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Cost          float64 `protobuf:"fixed64,5,opt,name=cost,proto3" json:"cost,omitempty"`
	Animalid      string  `protobuf:"bytes,6,opt,name=animalid,proto3" json:"animalid,omitempty"`
	Reason        string  `protobuf:"bytes,7,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *AppointmentData) Reset() {
	*x = AppointmentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appointment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentData) ProtoMessage() {}

func (x *AppointmentData) ProtoReflect() protoreflect.Message {
	mi := &file_appointment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentData.ProtoReflect.Descriptor instead.
func (*AppointmentData) Descriptor() ([]byte, []int) {
	return file_appointment_proto_rawDescGZIP(), []int{4}
}

func (x *AppointmentData) GetAppointmentid() string {
	if x != nil {
		return x.Appointmentid
	}
	return ""
}

func (x *AppointmentData) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *AppointmentData) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AppointmentData) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AppointmentData) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *AppointmentData) GetAnimalid() string {
	if x != nil {
		return x.Animalid
	}
	return ""
}

func (x *AppointmentData) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type AppointmentsOfUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appointments []*Appointment `protobuf:"bytes,1,rep,name=appointments,proto3" json:"appointments,omitempty"`
}

func (x *AppointmentsOfUser) Reset() {
	*x = AppointmentsOfUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appointment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentsOfUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentsOfUser) ProtoMessage() {}

func (x *AppointmentsOfUser) ProtoReflect() protoreflect.Message {
	mi := &file_appointment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentsOfUser.ProtoReflect.Descriptor instead.
func (*AppointmentsOfUser) Descriptor() ([]byte, []int) {
	return file_appointment_proto_rawDescGZIP(), []int{5}
}

func (x *AppointmentsOfUser) GetAppointments() []*Appointment {
	if x != nil {
		return x.Appointments
	}
	return nil
}

type AppointmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Date     string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Animalid string `protobuf:"bytes,3,opt,name=animalid,proto3" json:"animalid,omitempty"`
	Reason   string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *AppointmentRequest) Reset() {
	*x = AppointmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appointment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentRequest) ProtoMessage() {}

func (x *AppointmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_appointment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentRequest.ProtoReflect.Descriptor instead.
func (*AppointmentRequest) Descriptor() ([]byte, []int) {
	return file_appointment_proto_rawDescGZIP(), []int{6}
}

func (x *AppointmentRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AppointmentRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *AppointmentRequest) GetAnimalid() string {
	if x != nil {
		return x.Animalid
	}
	return ""
}

func (x *AppointmentRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type AppointmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                  string               `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Duration             float64              `protobuf:"fixed64,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Cost                 float64              `protobuf:"fixed64,3,opt,name=cost,proto3" json:"cost,omitempty"`
	Possibleappointments []*AppointmentChoice `protobuf:"bytes,4,rep,name=possibleappointments,proto3" json:"possibleappointments,omitempty"`
}

func (x *AppointmentResponse) Reset() {
	*x = AppointmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appointment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentResponse) ProtoMessage() {}

func (x *AppointmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_appointment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentResponse.ProtoReflect.Descriptor instead.
func (*AppointmentResponse) Descriptor() ([]byte, []int) {
	return file_appointment_proto_rawDescGZIP(), []int{7}
}

func (x *AppointmentResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *AppointmentResponse) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *AppointmentResponse) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *AppointmentResponse) GetPossibleappointments() []*AppointmentChoice {
	if x != nil {
		return x.Possibleappointments
	}
	return nil
}

type AppointmentCancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appointmentid string `protobuf:"bytes,1,opt,name=appointmentid,proto3" json:"appointmentid,omitempty"`
	Uid           string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *AppointmentCancel) Reset() {
	*x = AppointmentCancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appointment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentCancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentCancel) ProtoMessage() {}

func (x *AppointmentCancel) ProtoReflect() protoreflect.Message {
	mi := &file_appointment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentCancel.ProtoReflect.Descriptor instead.
func (*AppointmentCancel) Descriptor() ([]byte, []int) {
	return file_appointment_proto_rawDescGZIP(), []int{8}
}

func (x *AppointmentCancel) GetAppointmentid() string {
	if x != nil {
		return x.Appointmentid
	}
	return ""
}

func (x *AppointmentCancel) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

type AppointmentChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appointmentid string `protobuf:"bytes,1,opt,name=appointmentid,proto3" json:"appointmentid,omitempty"`
	Date          string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *AppointmentChoice) Reset() {
	*x = AppointmentChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appointment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentChoice) ProtoMessage() {}

func (x *AppointmentChoice) ProtoReflect() protoreflect.Message {
	mi := &file_appointment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentChoice.ProtoReflect.Descriptor instead.
func (*AppointmentChoice) Descriptor() ([]byte, []int) {
	return file_appointment_proto_rawDescGZIP(), []int{9}
}

func (x *AppointmentChoice) GetAppointmentid() string {
	if x != nil {
		return x.Appointmentid
	}
	return ""
}

func (x *AppointmentChoice) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type Appointment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      string  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Date     string  `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Duration float64 `protobuf:"fixed64,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *Appointment) Reset() {
	*x = Appointment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appointment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appointment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appointment) ProtoMessage() {}

func (x *Appointment) ProtoReflect() protoreflect.Message {
	mi := &file_appointment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appointment.ProtoReflect.Descriptor instead.
func (*Appointment) Descriptor() ([]byte, []int) {
	return file_appointment_proto_rawDescGZIP(), []int{10}
}

func (x *Appointment) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Appointment) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Appointment) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

var File_appointment_proto protoreflect.FileDescriptor

var file_appointment_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x3a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1a, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x22,
	0x9d, 0x01, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0xc1, 0x01, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6e, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x12, 0x52, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x14, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4b, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x22, 0x4d, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x4f, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x32, 0xee, 0x03, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x1a,
	0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x57, 0x0a, 0x12, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1f, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x44, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x1a, 0x13, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x12, 0x13, 0x2e,
	0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x66, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x1a, 0x5a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x3b, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_appointment_proto_rawDescOnce sync.Once
	file_appointment_proto_rawDescData = file_appointment_proto_rawDesc
)

func file_appointment_proto_rawDescGZIP() []byte {
	file_appointment_proto_rawDescOnce.Do(func() {
		file_appointment_proto_rawDescData = protoimpl.X.CompressGZIP(file_appointment_proto_rawDescData)
	})
	return file_appointment_proto_rawDescData
}

var file_appointment_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_appointment_proto_goTypes = []interface{}{
	(*Status)(nil),              // 0: appointment.Status
	(*UserID)(nil),              // 1: appointment.UserID
	(*AppointmentID)(nil),       // 2: appointment.AppointmentID
	(*AppointmentCreate)(nil),   // 3: appointment.AppointmentCreate
	(*AppointmentData)(nil),     // 4: appointment.AppointmentData
	(*AppointmentsOfUser)(nil),  // 5: appointment.AppointmentsOfUser
	(*AppointmentRequest)(nil),  // 6: appointment.AppointmentRequest
	(*AppointmentResponse)(nil), // 7: appointment.AppointmentResponse
	(*AppointmentCancel)(nil),   // 8: appointment.AppointmentCancel
	(*AppointmentChoice)(nil),   // 9: appointment.AppointmentChoice
	(*Appointment)(nil),         // 10: appointment.Appointment
}
var file_appointment_proto_depIdxs = []int32{
	10, // 0: appointment.AppointmentsOfUser.appointments:type_name -> appointment.Appointment
	9,  // 1: appointment.AppointmentResponse.possibleappointments:type_name -> appointment.AppointmentChoice
	3,  // 2: appointment.AppointmentService.CreateAppointment:input_type -> appointment.AppointmentCreate
	6,  // 3: appointment.AppointmentService.RequestAppointment:input_type -> appointment.AppointmentRequest
	2,  // 4: appointment.AppointmentService.DecideAppointment:input_type -> appointment.AppointmentID
	2,  // 5: appointment.AppointmentService.DeleteAppointment:input_type -> appointment.AppointmentID
	2,  // 6: appointment.AppointmentService.GetAppointment:input_type -> appointment.AppointmentID
	1,  // 7: appointment.AppointmentService.GetAppointmentsOfUser:input_type -> appointment.UserID
	2,  // 8: appointment.AppointmentService.CreateAppointment:output_type -> appointment.AppointmentID
	7,  // 9: appointment.AppointmentService.RequestAppointment:output_type -> appointment.AppointmentResponse
	4,  // 10: appointment.AppointmentService.DecideAppointment:output_type -> appointment.AppointmentData
	0,  // 11: appointment.AppointmentService.DeleteAppointment:output_type -> appointment.Status
	4,  // 12: appointment.AppointmentService.GetAppointment:output_type -> appointment.AppointmentData
	5,  // 13: appointment.AppointmentService.GetAppointmentsOfUser:output_type -> appointment.AppointmentsOfUser
	8,  // [8:14] is the sub-list for method output_type
	2,  // [2:8] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_appointment_proto_init() }
func file_appointment_proto_init() {
	if File_appointment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_appointment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appointment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appointment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appointment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appointment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appointment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentsOfUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appointment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appointment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appointment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentCancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appointment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appointment_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Appointment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_appointment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_appointment_proto_goTypes,
		DependencyIndexes: file_appointment_proto_depIdxs,
		MessageInfos:      file_appointment_proto_msgTypes,
	}.Build()
	File_appointment_proto = out.File
	file_appointment_proto_rawDesc = nil
	file_appointment_proto_goTypes = nil
	file_appointment_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AppointmentServiceClient is the client API for AppointmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppointmentServiceClient interface {
	CreateAppointment(ctx context.Context, in *AppointmentCreate, opts ...grpc.CallOption) (*AppointmentID, error)
	RequestAppointment(ctx context.Context, in *AppointmentRequest, opts ...grpc.CallOption) (*AppointmentResponse, error)
	DecideAppointment(ctx context.Context, in *AppointmentID, opts ...grpc.CallOption) (*AppointmentData, error)
	DeleteAppointment(ctx context.Context, in *AppointmentID, opts ...grpc.CallOption) (*Status, error)
	GetAppointment(ctx context.Context, in *AppointmentID, opts ...grpc.CallOption) (*AppointmentData, error)
	GetAppointmentsOfUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*AppointmentsOfUser, error)
}

type appointmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppointmentServiceClient(cc grpc.ClientConnInterface) AppointmentServiceClient {
	return &appointmentServiceClient{cc}
}

func (c *appointmentServiceClient) CreateAppointment(ctx context.Context, in *AppointmentCreate, opts ...grpc.CallOption) (*AppointmentID, error) {
	out := new(AppointmentID)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentService/CreateAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) RequestAppointment(ctx context.Context, in *AppointmentRequest, opts ...grpc.CallOption) (*AppointmentResponse, error) {
	out := new(AppointmentResponse)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentService/RequestAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) DecideAppointment(ctx context.Context, in *AppointmentID, opts ...grpc.CallOption) (*AppointmentData, error) {
	out := new(AppointmentData)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentService/DecideAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) DeleteAppointment(ctx context.Context, in *AppointmentID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentService/DeleteAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) GetAppointment(ctx context.Context, in *AppointmentID, opts ...grpc.CallOption) (*AppointmentData, error) {
	out := new(AppointmentData)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentService/GetAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) GetAppointmentsOfUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*AppointmentsOfUser, error) {
	out := new(AppointmentsOfUser)
	err := c.cc.Invoke(ctx, "/appointment.AppointmentService/GetAppointmentsOfUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppointmentServiceServer is the server API for AppointmentService service.
type AppointmentServiceServer interface {
	CreateAppointment(context.Context, *AppointmentCreate) (*AppointmentID, error)
	RequestAppointment(context.Context, *AppointmentRequest) (*AppointmentResponse, error)
	DecideAppointment(context.Context, *AppointmentID) (*AppointmentData, error)
	DeleteAppointment(context.Context, *AppointmentID) (*Status, error)
	GetAppointment(context.Context, *AppointmentID) (*AppointmentData, error)
	GetAppointmentsOfUser(context.Context, *UserID) (*AppointmentsOfUser, error)
}

// UnimplementedAppointmentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAppointmentServiceServer struct {
}

func (*UnimplementedAppointmentServiceServer) CreateAppointment(context.Context, *AppointmentCreate) (*AppointmentID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppointment not implemented")
}
func (*UnimplementedAppointmentServiceServer) RequestAppointment(context.Context, *AppointmentRequest) (*AppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAppointment not implemented")
}
func (*UnimplementedAppointmentServiceServer) DecideAppointment(context.Context, *AppointmentID) (*AppointmentData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecideAppointment not implemented")
}
func (*UnimplementedAppointmentServiceServer) DeleteAppointment(context.Context, *AppointmentID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppointment not implemented")
}
func (*UnimplementedAppointmentServiceServer) GetAppointment(context.Context, *AppointmentID) (*AppointmentData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointment not implemented")
}
func (*UnimplementedAppointmentServiceServer) GetAppointmentsOfUser(context.Context, *UserID) (*AppointmentsOfUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentsOfUser not implemented")
}

func RegisterAppointmentServiceServer(s *grpc.Server, srv AppointmentServiceServer) {
	s.RegisterService(&_AppointmentService_serviceDesc, srv)
}

func _AppointmentService_CreateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).CreateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentService/CreateAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).CreateAppointment(ctx, req.(*AppointmentCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_RequestAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).RequestAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentService/RequestAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).RequestAppointment(ctx, req.(*AppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_DecideAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).DecideAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentService/DecideAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).DecideAppointment(ctx, req.(*AppointmentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_DeleteAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).DeleteAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentService/DeleteAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).DeleteAppointment(ctx, req.(*AppointmentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_GetAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).GetAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentService/GetAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).GetAppointment(ctx, req.(*AppointmentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_GetAppointmentsOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).GetAppointmentsOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appointment.AppointmentService/GetAppointmentsOfUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).GetAppointmentsOfUser(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppointmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appointment.AppointmentService",
	HandlerType: (*AppointmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppointment",
			Handler:    _AppointmentService_CreateAppointment_Handler,
		},
		{
			MethodName: "RequestAppointment",
			Handler:    _AppointmentService_RequestAppointment_Handler,
		},
		{
			MethodName: "DecideAppointment",
			Handler:    _AppointmentService_DecideAppointment_Handler,
		},
		{
			MethodName: "DeleteAppointment",
			Handler:    _AppointmentService_DeleteAppointment_Handler,
		},
		{
			MethodName: "GetAppointment",
			Handler:    _AppointmentService_GetAppointment_Handler,
		},
		{
			MethodName: "GetAppointmentsOfUser",
			Handler:    _AppointmentService_GetAppointmentsOfUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appointment.proto",
}
